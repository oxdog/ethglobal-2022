/* eslint-disable unused-imports/no-unused-vars-ts */

import { useEthersAdaptorFromProviderOrSigners } from 'eth-hooks'
import { useEthersAppContext } from 'eth-hooks/context'
import { asEthersAdaptor } from 'eth-hooks/functions'
import Head from 'next/head'
import React, { useEffect, useState } from 'react'

import { Header } from '../Header'

import { useAppContracts, useConnectAppContracts, useLoadAppContracts } from '~common/components/context'
import { useCreateAntNotificationHolder } from '~common/components/hooks/useAntNotification'
import { useScaffoldAppProviders } from '~common/components/hooks/useScaffoldAppProviders'
import {
  ALCHEMY_KEY,
  CONNECT_TO_BURNER_AUTOMATICALLY,
  LOCAL_PROVIDER,
  MAINNET_PROVIDER,
  TARGET_NETWORK_INFO,
} from '~~/config/app.config'
import { useLoadUserOnWalletConnect } from '~~/hooks/useLoadUserOnWalletConnect'
import { TSubstation } from '~~/pages/user/substations'
import { Substation } from './Substation'
import { useClearCookiesOnDisconnect } from '~~/hooks/useClearCookiesOnDisconnect'

interface SubstationsPageProps {
  substations: TSubstation[]
}

export const SubstationPage: React.FC<SubstationsPageProps> = ({ substations }) => {
  const [initiate, setInitiate] = useState<boolean>(false)

  useLoadUserOnWalletConnect()
  useClearCookiesOnDisconnect()

  useEffect(() => console.log('substations', substations), [substations])

  const notificationHolder = useCreateAntNotificationHolder()
  const scaffoldAppProviders = useScaffoldAppProviders({
    targetNetwork: TARGET_NETWORK_INFO,
    connectToBurnerAutomatically: CONNECT_TO_BURNER_AUTOMATICALLY,
    localProvider: LOCAL_PROVIDER,
    mainnetProvider: MAINNET_PROVIDER,
    alchemyKey: ALCHEMY_KEY,
  })

  const context = useEthersAppContext()

  useLoadAppContracts()
  const [mainnetAdaptor] = useEthersAdaptorFromProviderOrSigners(MAINNET_PROVIDER)
  useConnectAppContracts(mainnetAdaptor)
  useConnectAppContracts(asEthersAdaptor(context))

  const SSA = useAppContracts('SSA', context.chainId)

  useEffect(() => {
    const loadData = async () => {
      console.log('loading data')
      console.log(await SSA!.generalInfo())
    }

    if (SSA) {
      void loadData()
    }

    console.log('SSA', SSA)
  }, [SSA])

  return (
    <>
      <Head>
        <title>ðŸ¥ª Dashboard </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header scaffoldAppProviders={scaffoldAppProviders} />

      <div className="pt-20 flex flex-col items-center space-y-4">
        <h1>Your Substations</h1>
        {substations.map((s, i) => (
          <Substation
            key={s.name + i}
            name={s.name}
            symbol={s.symbol}
            address={s.address}
            balance={s.balance}
            balanceTimestamp={s.balanceTimestamp}
            flowRate={s.flowRate}
            tiers={s.tiers}
          />
        ))}
      </div>

      <div className="sticky bottom-0 text-center text-white font-bold w-full h-8 pt-2 bg-green-400">
        This page is usually only available to creators of the SubStation (where user can subscribe to). For demo
        purposes it can be viewed by all.
      </div>

      <div style={{ position: 'absolute' }}>{notificationHolder}</div>
    </>
  )
}

export default SubstationPage
